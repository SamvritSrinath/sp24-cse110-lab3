/**
Checklist:
Comments for each selector
rgb(r,g,b) Check  rgba(r,g,b,a) Check
hex #FFF Check ### FFFFFF Check
hsl hsla Check
color(colorspace c1 c2 c3 [\A]) Check

color-mix(colorspace c1[p1] c2[p2] [\A]) Check
CSS Variables + Fallbacks Check
Used --main-bg-color as HTML Variable for solution, then referenced in root and footer with fallback



Background color Check



Units
3 Absolute: 
    px, cm, in Check(px in #date, cm in section:has(h2), in in section + section)
3 Relative:
    em, rem, vw Check


Box Model:

Margin
    Need to use longmargin(margin-top, margin-right, margin-bottom, margin-left) Check
    Short margin(margin: 10px 20px 30px 40px) Check
    Auto margins(margin: auto)Check 

Padding
    Long padding(padding-top, padding-right, padding-bottom, padding-left)Check 
    Short padding(padding: 10px 20px 30px 40px)Check 

Borders
    border-style Check
    border-width Check
    border-color Check
    border-radius Check

Text
    color Check(see section, p to change color)
    text-align Check
    text-decoration Check

Display
    Must use at least 2: none, block, inline, inline-block Check
Sizing:
    height,
    width,
    max-width,
    min-width
Position: 
Use two of the values on position
    absolute,relative,fixed,static,sticky

Pseudoclass:
:hover
:active 

Layouts
    Flex
        3 Flexbox attributes
        At least 5 children within the flex
    Grid
        Apply Grid to display
        two children in the grid, use at least 5 grid attributes

Media Query
    Use 1 Media Query for screen-width(for responsive design)

External Fonts: 
    Use at least 1 external font


Selectors
.class
#id
* (universal)
element
attribute=foo
element, element
p:hover
Descendent Combinator(element element)
Child Combinator(element > element)
General sibling combinator(element ~ element)
Adjacent sibling combinator(element + element)
Combining Two Selectors(element.class)
:has() Selector
Nested Selectors
*/

/* ID Selector (#id) ID = Date */
#date {
	background-color: rgb(0, 128, 0); /* green */
	color: #fff; /* white */
	margin-top: 10px; /* Absolute unit: pixel */
	margin-right: 20px; /* Absolute unit: pixel */
	margin-bottom: 30px; /* Absolute unit: pixel */
	margin-left: 40px; /* Absolute unit: pixel */
	padding-top: 10px; /* Absolute unit: pixel */
	padding-right: 20px; /* Absolute unit: pixel */
	padding-bottom: 30px; /* Absolute unit: pixel */
	padding-left: 40px; /* Absolute unit: pixel */
	border-style: solid; /* Border style */
	border-width: 2px; /* Border width */
	border-color: #0000ff; /* Border color: black */
	border-radius: 5px; /* Border radius */
	text-align: center; /* Text alignment */
}

/* ID Selector (#id) ID = Date */
#agenda {
	background-color: rgb(158, 227, 98); /* green */
	color: #fff; /* white */
	margin-top: 2rem; /* Relative unit: rem */
	margin-right: 20px; /* Absolute unit: pixel */
	margin-bottom: 1.5cm; /* Absolute unit: centimeter */
	margin-left: 20px; /* Absolute unit: pixel */
	padding-top: 10px; /* Absolute unit: pixel */
	padding-right: 2em; /* Relative unit: em */
	padding-bottom: 15px; /* Absolute unit: pixel */
	padding-left: 2em; /* Relative unit: em */
	border-style: solid; /* Border style */
	border-width: 2px; /* Border width */
	border-color: #000; /* Border color: black */
	border-radius: 5px; /* Border radius */
	text-align: center; /* Text alignment */
}

/* Element Selector (element) and uses background-color, hsla, and colorspace */
header {
	background-color: hsla(
		240,
		100%,
		50%,
		0.8
	); /* blue with 80% transparency */
	color: color(colorspace srgb 0 0 0 / 1); /* black */
	margin: auto;
}

/* Class Selector (.class) and uses rgba */
.content {
	background-color: rgba(255, 165, 0, 0.5); /* orange with 50% transparency */
	margin: 10px 5px, 0px, 5px; /* Short margin */
	padding: 1rem, 0rem, 0rem, 1rem; /* Relative unit: rem */
	display: inline-block; /* Display property */
	height: 200px; /* Height property */
	min-width: 300px; /* Min-width property */
	position: relative; /* Position property */
}

.Roles {
	display: none;
	margin: 5px 5px 5px 5px;
	padding: 5px 5px 5px 5px;
	border-style: solid;
	border-width: 2px;
	border-color: #ff0000;
	border-radius: 5px;
}

/* Universal Selector (*) * selects all the elements*/
* {
	font-family: Arial, sans-serif; /* fallback font in case browser doesn't recognize the font */
}

a[href="https://www.drumondpark.co.uk/articulate_cards"]
{
	color: yellow;
}

/* CSS Variables & Fallbacks */
:root {
	--main-bg-color: #f0f0f0; /* light gray */
}

footer {
	background-color: var(--main-bg-color, #ccc);
	margin-top: 1in;
	margin-right: 2rem;
	margin-bottom: 30px;
	margin-left: 1in;
	padding-top: 15px;
	padding-right: 20px;
	padding-bottom: 15px;
	padding-left: 20px;
	border-style: solid;
	border-width: 2px;
	border-color: /*red*/ #ff0000;
	border-radius: 5px;
	text-align: center;
}

/* Pseudo-class Selector, i.e. on an action for a selector in CSS */
a:hover {
	color: color-mix(
		colorspace srgb #ff0000 50% #0000ff 50%
	); /* red and blue mix */
}

/* Selector List (element, element); we choose multiple elements and apply a margin*/
header h1,
nav ul li {
	margin: 10px;
}

/* Descendant Combinator (element element) the nav links are ordered lists so we can treat them as decsendents */
nav ul li a {
	text-decoration: underline;
}

/* Child Combinator (element > element). There exists only one nav in main so it is treated as a child */
main > nav {
	padding: 1rem; /* Relative unit: rem */
}

/* General sibling combinator (element ~ element): this was the only sibling I found*/
section ~ hr {
	border-color: #000; /* black */
}

/* Adjacent sibling combinator (element + element) */
section + section {
	margin-top: 2rem; /* Relative unit: rem */
}

section > p {
	/* Selects all p elements within a section, makes the margin auto and changes the text color to black */
	margin: auto;
	color: black;
}
/* Combining Two Selectors (element.class) */
section#agenda {
	background-color: #87ceeb; /* sky blue */
}

/* :has() Selector */
section:has(h2) {
	margin-bottom: 20px;
}

/* Nested Selectors */
section#agenda details summary {
	font-style: italic;
}

/* Flexbox Layout */
/* the two children are the h2 and the ordered list(and the list items) */
#updates {
	display: flex;
	flex-direction: column;
	flex-wrap: nowrap;
	justify-content: center;
	align-items: center;
}

/* Grid Layout */
/* the two+ children are the are everything contained in the main tag */
main {
	display: grid;
	grid-template-columns: 1fr 1fr 1fr;
	grid-template-rows: 1fr;
	gap: 1px;
	grid-auto-flow: row;
	justify-content: center;
}
/*the children are the textarea and the buttons for each field */
form {
	display: grid;
	grid-template-columns: 1fr 1fr;
	gap: 10px;
	justify-content: center;
	position: static;
}

/* using height attributes for text boxes */
form textarea {
	width: 60%;
	min-height: 100px;
	max-height: 100%;
}

/* using width attributes for buttons as well as forcing height */
form button {
	width: 30%;
	height: 50px;
	grid-column: span 2;
}

/* stress testing both flex and grid layouts */
#flex-container {
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	justify-content: center;
	align-items: center;
	gap: 2em;
}

/* grid container that usese all the attributes that I wanted relative */
#grid-container {
	display: grid;
	grid-template-columns: 1fr 1fr;
	grid-template-rows: 1fr 1fr;
	gap: 2em;
	justify-content: center;
	align-items: center;
}
